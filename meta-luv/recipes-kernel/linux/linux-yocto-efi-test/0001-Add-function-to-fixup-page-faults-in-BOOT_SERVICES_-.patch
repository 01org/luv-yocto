From 87834c1faff09b3a1eaa5fd61212454fc55b180b Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Thu, 25 Jun 2015 12:57:15 -0700
Subject: [PATCH 1/4] Add function to fixup page faults in BOOT_SERVICES_*
 regions

Accesses to BOOT_SERVICES_* memory regions are illegal after the OS
calls SetVirtualAddressMap, as per the UEFI specification. However, some
buggy FW implementations still access this access these regions after
such call.

Rather than safely mapping all the BOOT_SERVICES_* regions, map only
those that are illegally accessed. The function efi_boot_services_fixup
is intended to be called from the page fault handler.

[ All BOOT_SERVICES_* regions are still marked as reserved until
  efi_free_boot_services() is called, so we're OK to dynamically
  fixup any faults since the pages won't have been reused - Matt ]

Ideally, the new memory map with the just mapped region should be passed
to the firmware. However, as the UEFI specification,
SetVirtualAddressMap may be called only once. Subsequent calls will
return EFI_UNSUPPORTED. Thus, it is pointless to pass the new map.
Additionally, all the EFI_RUNTIME_SERVICES_* should already be mapped at
this point.

Also, at this point, the virtual address of the system table should have
been found. Thus, there is no need to look for it in the just-mapped
region.

Finally, this new mapping will not impact a reboot from kexec, as kexec
is only concerned about runtime memory regions.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/platform/efi/efi.c | 31 +++++++++++++++++++++++++++++++
 include/linux/efi.h         |  8 ++++++++
 2 files changed, 39 insertions(+)

diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c
index ad28540..c83016c 100644
--- a/arch/x86/platform/efi/efi.c
+++ b/arch/x86/platform/efi/efi.c
@@ -1030,3 +1030,34 @@ static int __init arch_parse_efi_cmdline(char *str)
 	return 0;
 }
 early_param("efi", arch_parse_efi_cmdline);
+
+
+#ifdef CONFIG_EFI_BOOT_SERVICES_WARN
+static const char boot_services_warning[] =
+"Fixing illegal access to BOOT_SERVICES_*. Bug in EFI firmware?\n";
+
+int efi_boot_services_fixup(unsigned long phys_addr)
+{
+	int ret;
+	efi_memory_desc_t md;
+
+	ret = efi_mem_desc_lookup(phys_addr, &md);
+
+	if (ret)
+		return 0;
+
+	if (md.type == EFI_BOOT_SERVICES_CODE ||
+	    md.type == EFI_BOOT_SERVICES_DATA)	{
+		/*
+		 * If the page fault was caused by an acccess to BOOT_SERVICES_*
+		 * memory regions, just map the region... and warn about it.
+		 * By now we should have found the virtual address of the system
+		 * table. Thus, no need to update.
+		 */
+		pr_warn_once("%s", (char *)&boot_services_warning);
+		efi_map_region(&md);
+		return 1;
+	}
+	return 0;
+}
+#endif
diff --git a/include/linux/efi.h b/include/linux/efi.h
index 569b5a8..6208fce 100644
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@ -915,6 +915,14 @@ extern void efi_initialize_iomem_resources(struct resource *code_resource,
 		struct resource *data_resource, struct resource *bss_resource);
 extern void efi_get_time(struct timespec *now);
 extern void efi_reserve_boot_services(void);
+#ifdef CONFIG_EFI_BOOT_SERVICES_WARN
+extern int efi_boot_services_fixup(unsigned long phys_addr);
+#else
+static inline int efi_boot_services_fixup(unsigned long phys_addr)
+{
+		return 0;
+}
+#endif
 extern int efi_get_fdt_params(struct efi_fdt_params *params);
 extern struct efi_memory_map memmap;
 extern struct kobject *efi_kobj;
-- 
1.9.1

